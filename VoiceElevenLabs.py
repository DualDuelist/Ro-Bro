import asyncio
from elevenlabs import generate, save, set_api_key, voices
from elevenlabs.api import User
import openai
import os
from pydub import AudioSegment
from pydub.playback import play
import requests
from shazamio import Shazam, Serialize
import speech_recognition as sr
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import subprocess

# Set up the Speech Recognizer
recognizer = sr.Recognizer()

# Set the Global API Key for Eleven Labs
set_api_key("28eb99fec8b7c7d92b6a95eab02efd10")

# Function to convert speech to text
def speech_to_text():
    with sr.Microphone() as source:
        print("I'm listening...")
        audio = recognizer.listen(source)
        
        try:
            text = recognizer.recognize_google(audio)
            return text
        except sr.UnknownValueError:
            print("Could not understand audio")
            return None
        except sr.RequestError as e:
            print("Error requesting results: {}".format(e))
            return None

def chatgpt(text):
    openai.api_key = "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"
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role" : "system" , "content" : "You're an assistant with an attitude problem and curt demeanor.  You answer questions quickly and concisely, but will usually end statements with light verbal jabs at the user."},
	    {"role": "user" , "content" : text}
        ],
        temperature = 0.4,
    )
    return response['choices'][0]['message']['content']

# Essence of V voice id = '5kVRtTR3zCyXU0F2oJhV'

# Function to stream text to ElevenLabs or Espeak for audio response
def text_to_speech(text_stream):
    user = User.from_api()
    if user.subscription.character_count < 29500:
        print("...with ElevenLabs")
        audio = generate(
            text=text_stream,
            voice="5kVRtTR3zCyXU0F2oJhV",
            model="eleven_monolingual_v1"
        )
        save(audio, "TEMP.wav")
        print("\nAdding Audio Effects\n")
        # Load the audio generated by ElevenLabs (replace 'elevenlabs_audio.mp3' with your audio data)
        generated_audio = AudioSegment.from_file('TEMP.wav')
        # Add an echo effect
        echoed_audio = generated_audio.overlay(generated_audio, position=10)  # Adjust position and gain as needed
        print("\nPlaying\n")
        # Play the echoed audio
        play(echoed_audio)
        # Delete the temporary audio file
        os.remove('TEMP.wav')
    else:
        print("...with ESPEAK")
        try:
            # Generate text-to-speech and save to a temporary WAV file
            subprocess.run(['espeak', text_stream, '-v', 'en-us+f3', '-w', 'temp.wav'])
            # Apply echo effect using sox
            subprocess.run(['sox', 'temp.wav', 'temp_echo.wav', 'echo', '0.6', '0.6', '20', '0.2'])
            # Play the audio using aplay
            subprocess.run(['aplay', 'temp_echo.wav'])
        finally:
            # Clean up: Delete temporary files
            os.remove('temp.wav')
            os.remove('temp_echo.wav')

# Use Shazam to recognize music
async def recognize_music(shazam):
    # Record audio with the Microphone
    with sr.Microphone() as source:
        print("Recording Audio")
        # Record 10 seconds of audio
        audio = sr.Recognizer().record(source, duration = 10)
    # Write the audio to MUSIC.wav
    with open("MUSIC.mp3", "wb") as f:
        f.write(audio.get_wav_data())
    print("Audio saved to MUSIC.mp3")
    print("Accessing Database")
    # Cross reference the database
    song = await shazam.recognize_song('MUSIC.mp3')
    print("Serialize the info")
    # Serialize the Info from the Database
    serialized = Serialize.full_track(song)
    try:
        print("Save the info")
        # Save the Title and Author
        title = serialized.track.title
        subtitle = serialized.track.subtitle
        # Remove the Music
        print("Removing MUSIC.mp3")
        os.remove('MUSIC.mp3')
        return title, subtitle
    except AttributeError:
        print("No Song Info")
        os.remove('MUSIC.mp3')
        return None, None

def play_music():
    text_to_speech(chatgpt("Be concise.  Ask what song to play."))
    # Search for a track by name
    track_name = speech_to_text()
    results = sp.search(q=track_name, type="track", limit=1)
    # Extract the track URI from the search results
    if results['tracks']['items']:
        track_uri = results['tracks']['items'][0]['uri']
        return track_uri
    else:
        print(f"No track found with the name '{track_name}'")
        return None

# Main function
if __name__ == "__main__":
    sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id="bcc9a865b8b64c96a2e0c9a8f596bcde", client_secret="36fc4ab976524bafbd8a09822a21a1d9", redirect_uri="http://google.com/callback/", scope="user-modify-playback-state"))
    devices = sp.devices()
    for device in devices['devices']:
        print(f"Device: {device['name']}, ID: {device['id']}")
    shazam = Shazam()
    while True:
        input("Press Enter to ask ChatGPT something...")
        text = speech_to_text()
        if text:
            print("\nYou said:", text, "\n")
            if "shazam" in text.lower():
                text_to_speech(chatgpt("Be concise.  Say you're processing the Shazam request."))
                title, subtitle = asyncio.run(recognize_music(shazam))
                if title is None:
                    text = ("Be concise.  Say you couldn't find anything.  Blame the user.")
                else:
                    text = (f"Tell me about {title} by {subtitle}.")
            if "spotify" in text.lower():
                track_uri = play_music()
                if None:
                    text = ("Be concise.  Say you couldn't find anything.  Blame the user.")
                else:
                    text_to_speech(chatgpt("Be concise.  Say you're playing music."))
                    sp.start_playback(uris=[track_uri], device_id=spotify_device_id)
                    text = ("Be concise.  Insult user's taste in music.")
            print("\nGenerating Response with ChatGPT\n")
            response = chatgpt(text)
            print("\nGenerating Voice...\n")
            text_to_speech(response)
        else:
            text_to_speech(chatgpt("Get annoyed with me for being quiet and/or unintelligible."))
